services:
  vault-module:
    image: vault:1.13.3
    container_name: vault-module
    cap_add:
      - IPC_LOCK
    networks:
      - internal_network
    volumes:
      - vault-data:/vault/data
      - vault-certs:/vault/certs:ro
      - ./config/vault-prod.hcl:/vault/config/vault.hcl:ro

  nginx-proxy:
    image: nginx:alpine
    container_name: nginx-proxy
    depends_on:
      - vault-module
      - grafana-module
      - prometheus-module
      - gateway-service
      - frontend
    restart: always
    ports:
      - "127.0.0.1:4443:80"

    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - vault-certs:/vault/certs:ro

    networks:
      - internal_network
  frontend:
    build:
      context: ../frontend
      dockerfile: dockerfile
    image: ftpreavis/frontend:latest
    restart: always
    ports:
      - "8080:80"
  db-service:
    build:
      context: ../services/db-service
      dockerfile: dockerfile
    container_name: db-service
    volumes:
      - ../services/db-service:/app
    environment:
      NODE_ENV: production
    working_dir: /app
    networks:
      - metrics_network
      - internal_network

  auth-service:
    build:
      context: ../services/auth-service
      dockerfile: dockerfile
    container_name: auth-service
    volumes:
      - ../services/auth-service:/app
    environment:
      NODE_ENV: production
    working_dir: /app
    networks:
      - metrics_network
      - internal_network

  chat-service:
    build:
      context: ../services/chat-service
      dockerfile: dockerfile
    container_name: chat-service
    volumes:
      - ../services/chat-service:/app
    environment:
      NODE_ENV: production
    working_dir: /app
    networks:
      - metrics_network
      - internal_network

  gateway-service:
    build:
      context: ../services/gateway-service
      dockerfile: dockerfile
    container_name: gateway-service
    ports:
      - "4008:3000"
    volumes:
      - ../services/gateway-service:/app
    environment:
      NODE_ENV: production
    working_dir: /app
    networks:
      - metrics_network
      - internal_network

  lobby-service:
    build:
      context: ../services/lobby-service
      dockerfile: dockerfile
    container_name: lobby-service
    volumes:
      - ../services/lobby-service:/app
    environment:
      NODE_ENV: production
    working_dir: /app
    networks:
      - metrics_network
      - internal_network

  matchmaking-service:
    build:
      context: ../services/matchmaking-service
      dockerfile: dockerfile
    container_name: matchmaking-service
    volumes:
      - ../services/matchmaking-service:/app
    environment:
      NODE_ENV: production
    working_dir: /app
    networks:
      - metrics_network
      - internal_network

  notification-service:
    build:
      context: ../services/notification-service
      dockerfile: dockerfile
    container_name: notification-service
    volumes:
      - ../services/notification-service:/app
    environment:
      NODE_ENV: production
    working_dir: /app
    networks:
      - metrics_network
      - internal_network

  tournament-service:
    build:
      context: ../services/tournament-service
      dockerfile: dockerfile
    container_name: tournament-service
    volumes:
      - ../services/tournament-service:/app
    environment:
      NODE_ENV: production
    working_dir: /app
    networks:
      - metrics_network
      - internal_network

  user-service:
    build:
      context: ../services/user-service
      dockerfile: dockerfile
    container_name: user-service
    volumes:
      - ../services/user-service:/app
    environment:
      NODE_ENV: production
    working_dir: /app
    networks:
      - metrics_network
      - internal_network

  prometheus-module:
    image: prom/prometheus:latest
    container_name: prometheus-module
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - metrics_network

  grafana-module:
    build:
      context: ./grafana
      dockerfile: dockerfile
    container_name: grafana-module
    ports:
      - "9000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus-module
    networks:
      - metrics_network

volumes:
  vault-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /srv/ft_preavis/data/vault/data
  vault-certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /srv/ft_preavis/data/vault/certs
  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /srv/ft_preavis/data/grafana/data
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /srv/ft_preavis/data/prometheus/data

networks:
  metrics_network:
    driver: bridge
    internal: true
  internal_network:
    driver: bridge
    internal: true
