services:
  vault-module:
    image: vault:1.13.3
    container_name: vault-module
    cap_add:
      - IPC_LOCK
    networks:
      - internal_network
    command: server
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - /srv/ft_preavis/data/vault/data:/vault/data
      - /srv/ft_preavis/data/vault/certs:/vault/certs:ro
      - ./vault/config/vault-prod.hcl:/vault/config/vault.hcl:ro
    environment:
      - SKIP_SETCAP=false
      - VAULT_ADDR=https://vault.transcendance.charles-poulain.ovh
    restart: always
    env_file:
      - ../data/env/.env.prod
    healthcheck:
      test: [
          "CMD-SHELL",
          "curl -k --fail https://127.0.0.1:8200/v1/sys/health?standbyok=true&uninitcode=200&sealedcode=200 || exit 1"
        ]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 20s
    depends_on:
      nginx-proxy:
        condition: service_healthy

  nginx-proxy:
    build:
      context: ./nginx
      dockerfile: dockerfile
    container_name: nginx-proxy
    ports:
      - "4443:80"
    volumes:
      - /srv/ft_preavis/data/vault/certs:/vault/certs:ro
      - /srv/ft_preavis/data/nginx/logs:/var/log/nginx
    networks:
      - internal_network
      - metrics_network
    environment:
      - WAIT_FOR_HOSTS=vault-module prometheus-module grafana-module
    healthcheck:
      test: ["CMD", "test", "-f", "/tmp/nginx-waiting"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 5s

  frontend:
    build:
      context: ../frontend
      dockerfile: dockerfile
    image: ftpreavis/frontend:latest
    restart: always
    ports:
      - "8080:80"
    networks:
      - internal_network
    env_file:
      - ../data/env/.env.prod
    depends_on:
      nginx-proxy:
        condition: service_healthy

  db-service:
    build:
      context: ../services/db-service
      dockerfile: dockerfile
    image: ftpreavis/db-service:latest
    container_name: db-service
    working_dir: /app
    volumes:
      - /srv/ft_preavis/data/services/db-service:/app/database/database.db
    expose:
      - "3000"
    networks:
      - metrics_network
      - internal_network
    restart: always
    env_file:
      - ../data/env/.env.prod
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "http://localhost:3000/metrics"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    depends_on:
      gateway-service:
        condition: service_healthy

  auth-service:
    build:
      context: ../services/auth-service
      dockerfile: dockerfile
    image: ftpreavis/auth-service:latest
    container_name: auth-service
    working_dir: /app
    expose:
      - "3000"
    networks:
      - metrics_network
      - internal_network
    restart: always
    env_file:
      - ../data/env/.env.prod
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "http://localhost:3000/metrics"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    depends_on:
      db-service:
        condition: service_healthy

  chat-service:
    build:
      context: ../services/chat-service
      dockerfile: dockerfile
    image: ftpreavis/chat-service:latest
    container_name: chat-service
    working_dir: /app
    expose:
      - "3000"
    networks:
      - metrics_network
      - internal_network
    restart: always
    env_file:
      - ../data/env/.env.prod
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "http://localhost:3000/metrics"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    depends_on:
      db-service:
        condition: service_healthy

  gateway-service:
    build:
      context: ../services/gateway-service
      dockerfile: dockerfile
    container_name: gateway-service
    image: ftpreavis/gateway-service:latest
    working_dir: /app
    expose:
      - "3000"
    ports:
      - "4008:3000"
    networks:
      - metrics_network
      - internal_network
    restart: always
    env_file:
      - ../data/env/.env.prod
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "http://localhost:3000/metrics"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    depends_on:
      vault-module:
        condition: service_healthy
      prometheus-module:
        condition: service_healthy
      grafana-module:
        condition: service_healthy

  lobby-service:
    build:
      context: ../services/lobby-service
      dockerfile: dockerfile
    image: ftpreavis/lobby-service:latest
    container_name: lobby-service
    working_dir: /app
    expose:
      - "3000"
    networks:
      - metrics_network
      - internal_network
    restart: always
    env_file:
      - ../data/env/.env.prod
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "http://localhost:3000/metrics"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    depends_on:
      media-service:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
      chat-service:
        condition: service_healthy

  matchmaking-service:
    build:
      context: ../services/matchmaking-service
      dockerfile: dockerfile
    image: ftpreavis/matchmaking-service:latest
    container_name: matchmaking-service
    working_dir: /app
    expose:
      - "3000"
    networks:
      - metrics_network
      - internal_network
    restart: always
    env_file:
      - ../data/env/.env.prod
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "http://localhost:3000/metrics"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    depends_on:
      media-service:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
      chat-service:
        condition: service_healthy

  notification-service:
    build:
      context: ../services/notification-service
      dockerfile: dockerfile
    image: ftpreavis/notification-service:latest
    container_name: notification-service
    working_dir: /app
    expose:
      - "3000"
    networks:
      - metrics_network
      - internal_network
    restart: always
    env_file:
      - ../data/env/.env.prod
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "http://localhost:3000/metrics"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    depends_on:
      media-service:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
      chat-service:
        condition: service_healthy

  tournament-service:
    build:
      context: ../services/tournament-service
      dockerfile: dockerfile
    image: ftpreavis/tournament-service:latest
    container_name: tournament-service
    working_dir: /app
    expose:
      - "3000"
    networks:
      - metrics_network
      - internal_network
    restart: always
    env_file:
      - ../data/env/.env.prod
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "http://localhost:3000/metrics"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    depends_on:
      media-service:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
      chat-service:
        condition: service_healthy

  user-service:
    build:
      context: ../services/user-service
      dockerfile: dockerfile
    image: ftpreavis/user-service:latest
    container_name: user-service
    working_dir: /app
    expose:
      - "3000"
    networks:
      - metrics_network
      - internal_network
    restart: always
    env_file:
      - ../data/env/.env.prod
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "http://localhost:3000/metrics"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    depends_on:
      db-service:
        condition: service_healthy

  media-service:
    build:
      context: ../services/media-service
      dockerfile: dockerfile
    image: ftpreavis/media-service:latest
    container_name: media-service
    working_dir: /app
    volumes:
      - /srv/ft_preavis/data/services/media-service:/app/uploads
    expose:
      - "3000"
    ports:
      - "4009:3000"
    networks:
      - metrics_network
      - internal_network
    restart: always
    env_file:
      - ../data/env/.env.prod
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "http://localhost:3000/metrics"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    depends_on:
      db-service:
        condition: service_healthy

  prometheus-module:
    image: prom/prometheus:latest
    container_name: prometheus-module
    user: "0:0"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/web.yml:/etc/prometheus/web.yml:ro
      - /srv/ft_preavis/data/prometheus/data:/prometheus
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--web.config.file=/etc/prometheus/web.yml"
    networks:
      - metrics_network
      - internal_network
    healthcheck:
      test: ["CMD-SHELL", "wget --spider --quiet http://localhost:9090 2>&1 | grep -qE 401"]
      interval: 10s
      timeout: 15s
      retries: 10
      start_period: 10s
    depends_on:
      nginx-proxy:
        condition: service_healthy

  grafana-module:
    build:
      context: ./grafana
      dockerfile: dockerfile
    container_name: grafana-module
    ports:
      - "9000:3000"
    volumes:
      - /srv/ft_preavis/data/grafana/data:/var/lib/grafana
    networks:
      - metrics_network
      - internal_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 15s
      retries: 10
      start_period: 10s
    depends_on:
      prometheus-module:
        condition: service_healthy

networks:
  metrics_network:
    driver: bridge
  internal_network:
    driver: bridge
